@Library('your-shared-library') _

pipeline {
    agent any
    
    parameters {
        choice(
            name: 'PROJECT_TYPE',
            choices: ['java-maven', 'java-gradle', 'python'],
            description: 'Type of project to build'
        )
        choice(
            name: 'TOOL_VERSION',
            choices: ['latest', '3.11', '3.9', '3.8', '3.8.6', '3.9.0', '7.4', '7.6.1', '8.0'],
            description: 'Tool version to use from Nexus'
        )
    }
    
    environment {
        NEXUS_URL = 'https://nexus.company.com:8082'
        NEXUS_REGISTRY = 'nexus.company.com:8082'
        PROJECT_NAME = 'dev'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Pull Docker Image') {
            steps {
                script {
                    // Determine image name
                    def imageMap = [
                        'java-maven': 'maven',
                        'java-gradle': 'gradle',
                        'python': 'python'
                    ]
                    
                    def imageName = imageMap[params.PROJECT_TYPE]
                    def fullImagePath = "${env.NEXUS_REGISTRY}/${env.PROJECT_NAME}/${imageName}:${params.TOOL_VERSION}"
                    
                    echo "üì¶ Pulling: ${fullImagePath}"
                    
                    docker.withRegistry(env.NEXUS_URL, 'nexus-docker-creds') {
                        def image = docker.image(fullImagePath)
                        image.pull()
                        echo "‚úÖ Image pulled successfully!"
                    }
                    
                    env.DOCKER_IMAGE = fullImagePath
                }
            }
        }
        
        stage('Build Application') {
            steps {
                script {
                    echo "üî® Building application using: ${env.DOCKER_IMAGE}"
                    
                    docker.withRegistry(env.NEXUS_URL, 'nexus-docker-creds') {
                        def image = docker.image(env.DOCKER_IMAGE)
                        
                        image.inside("-v ${WORKSPACE}:/workspace -w /workspace") {
                            if (params.PROJECT_TYPE == 'python') {
                                // Python build
                                if (fileExists('requirements.txt')) {
                                    sh 'pip install -r requirements.txt'
                                }
                                if (fileExists('setup.py')) {
                                    sh 'python setup.py build'
                                }
                                
                            } else if (params.PROJECT_TYPE == 'java-maven') {
                                // Maven build
                                sh 'mvn clean compile package -DskipTests -B'
                                
                            } else if (params.PROJECT_TYPE == 'java-gradle') {
                                // Gradle build
                                sh './gradlew clean build -x test'
                            }
                        }
                    }
                    
                    echo "‚úÖ Build completed!"
                }
            }
        }
    }
    
    post {
        success {
            echo "üéâ SUCCESS: Pulled ${env.DOCKER_IMAGE} and built application!"
        }
        failure {
            echo "‚ùå FAILED: Build failed!"
        }
    }
}
