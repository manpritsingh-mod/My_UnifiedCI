/**
 * Enhanced Python Template - Pulls pre-built images from Nexus
 * Usage: python_docker_template([python_version: '3.11', run_tests: true])
 */
def call(Map config = [:]) {
    logger.info("üêç Starting Python Pipeline with Nexus Docker Images")
    
    config = setupDockerConfig(config)
    def stageResults = [:]
    
    stage('Checkout') {
        script {
            logger.info("üì• CHECKOUT STAGE")
            core_github.checkout()
            stageResults['Checkout'] = 'SUCCESS'
        }
    }
    
    stage('Pull Python Image from Nexus') {
        script {
            logger.info("üì¶ PULLING PYTHON IMAGE FROM NEXUS")
            
            def imagePath = "${config.nexus.registry}/${config.nexus.project}/python:${config.python_version}"
            logger.info("üîç Image: ${imagePath}")
            
            docker.withRegistry(config.nexus.url, config.nexus.credentials_id) {
                def image = docker.image(imagePath)
                
                logger.info("‚¨áÔ∏è Pulling image...")
                image.pull()
                
                // Verify image works
                image.inside {
                    sh 'python --version'
                    sh 'pip --version'
                    sh 'pytest --version'
                }
                
                logger.info("‚úÖ Python image ready!")
            }
            
            env.PYTHON_DOCKER_IMAGE = imagePath
            stageResults['Pull Image'] = 'SUCCESS'
        }
    }
    
    stage('Setup Environment') {
        script {
            logger.info("üîß SETUP ENVIRONMENT")
            core_utils.setupProjectEnvironment(config.project_language, config)
            stageResults['Setup'] = 'SUCCESS'
        }
    }
    
    stage('Install Dependencies') {
        script {
            logger.info("üì¶ INSTALL DEPENDENCIES IN CONTAINER")
            
            docker.withRegistry(config.nexus.url, config.nexus.credentials_id) {
                def image = docker.image(env.PYTHON_DOCKER_IMAGE)
                
                image.inside("-v ${WORKSPACE}:/workspace -w /workspace") {
                    if (fileExists('requirements.txt')) {
                        logger.info("üîß Installing Python dependencies...")
                        sh 'pip install -r requirements.txt'
                        logger.info("‚úÖ Dependencies installed successfully")
                    } else {
                        logger.info("‚ÑπÔ∏è No requirements.txt found")
                    }
                }
            }
            
            stageResults['Install Dependencies'] = 'SUCCESS'
        }
    }
    
    stage('Lint') {
        if (core_utils.shouldExecuteStage('lint', config)) {
            script {
                logger.info("üîç LINTING IN CONTAINER")
                
                def lintResult = runPythonLintInContainer(config)
                env.LINT_RESULT = lintResult
                stageResults['Lint'] = lintResult
            }
        } else {
            env.LINT_RESULT = 'SKIPPED'
            stageResults['Lint'] = 'SKIPPED'
        }
    }
    
    stage('Build') {
        script {
            logger.info("üî® BUILDING IN CONTAINER")
            
            docker.withRegistry(config.nexus.url, config.nexus.credentials_id) {
                def image = docker.image(env.PYTHON_DOCKER_IMAGE)
                
                image.inside("-v ${WORKSPACE}:/workspace -w /workspace") {
                    if (fileExists('setup.py')) {
                        logger.info("üèóÔ∏è Building Python package...")
                        sh 'python setup.py build'
                        logger.info("‚úÖ Build completed successfully")
                    } else {
                        logger.info("‚ÑπÔ∏è No setup.py found, skipping build step")
                    }
                }
            }
            
            stageResults['Build'] = 'SUCCESS'
        }
    }
    
    stage('Test Execution') {
        script {
            def parallelTests = [:]
            
            if (core_utils.shouldExecuteStage('unittest', config)) {
                parallelTests['Unit Test'] = {
                    logger.info("üß™ Running Unit Tests in Container")
                    def testResult = runPythonTestsInContainer(config)
                    env.UNIT_TEST_RESULT = testResult
                    stageResults['Unit Test'] = testResult
                }
            }
            
            if (parallelTests.size() > 0) {
                parallel parallelTests
            }
        }
    }
    
    stage('Generate Reports') {
        script {
            logger.info("üìä GENERATE REPORTS STAGE")
            sendReport.generateAndSendReports(config, stageResults)
            stageResults['Generate Reports'] = 'SUCCESS'
        }
    }
}

private def setupDockerConfig(Map config) {
    if (!config.project_language) {
        config.project_language = 'python'
    }
    
    // Docker/Nexus configuration
    if (!config.nexus) {
        config.nexus = [:]
    }
    config.nexus.url = config.nexus.url ?: 'https://nexus.company.com:8082'
    config.nexus.registry = config.nexus.registry ?: 'nexus.company.com:8082'
    config.nexus.project = config.nexus.project ?: 'dev'
    config.nexus.credentials_id = config.nexus.credentials_id ?: 'nexus-docker-creds'
    
    // Python version
    config.python_version = config.python_version ?: '3.11'
    
    // Test configuration
    if (!config.tool_for_unit_testing) {
        config.tool_for_unit_testing = [python: 'pytest']
    }
    if (!config.tool_for_lint_testing) {
        config.tool_for_lint_testing = [python: 'pylint']
    }
    
    return config
}

private def runPythonLintInContainer(Map config) {
    return docker.withRegistry(config.nexus.url, config.nexus.credentials_id) {
        def image = docker.image(env.PYTHON_DOCKER_IMAGE)
        
        return image.inside("-v ${WORKSPACE}:/workspace -w /workspace") {
            try {
                def lintTool = config.tool_for_lint_testing.python
                logger.info("üßπ Running ${lintTool}...")
                sh "${lintTool} **/*.py --output-format=text"
                return 'SUCCESS'
            } catch (Exception e) {
                logger.warning("‚ö†Ô∏è Lint found violations: ${e.getMessage()}")
                return 'UNSTABLE'
            }
        }
    }
}

private def runPythonTestsInContainer(Map config) {
    return docker.withRegistry(config.nexus.url, config.nexus.credentials_id) {
        def image = docker.image(env.PYTHON_DOCKER_IMAGE)
        
        return image.inside("-v ${WORKSPACE}:/workspace -w /workspace") {
            try {
                logger.info("üèÉ Running Python tests...")
                sh 'pytest --verbose --tb=short'
                return 'SUCCESS'
            } catch (Exception e) {
                logger.warning("‚ö†Ô∏è Some tests failed: ${e.getMessage()}")
                return 'UNSTABLE'
            }
        }
    }
}
